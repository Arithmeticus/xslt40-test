<?xml version="1.0" encoding="UTF-8"?>
<out>
   <loop n="5">
      <z c="5" p="1"/>Version 9.1 (2008-NN-NN)<z c="6" p="2"/>
      <p>XQuery Updates</p>
      <z c="7" p="3"/>
      <p>Conditional Type Assignment</p>
      <z c="8" p="4"/>
      <p>Saxon 9.1 introduces support for XQuery Updates.</p>
      <z c="9" p="5"/>
      <p>To run an updating query from the command line, use the option <code>-update:on</code> on the command line.
From Java, compile the query in the normal way, and use the method <code>XQueryExpression.runUpdate()</code> to
execute the query. At present it is not possible to run updates using the higher-level interfaces in XQJ or S9API,
or using the .NET API.</p>
      <z c="10" p="6"/>
      <p>To enable updating internally, an extension of the <code>NodeInfo</code> interface has been introduced, called
<code>MutableNodeInfo</code>. Currently the only tree implementation that supports this interface is the linked tree
(formerly called the standard tree). In principle updating should work with any tree model that supports this
interface, though at present there are probably some dependencies on the specific implementation.</p>
      <z c="11" p="7"/>
      <p>The linked tree has been improved so that it can now handle schema type annotations, and there have been improvements
to the way in which line number information is maintained.</p>
      <z c="12" p="8"/>
      <p>Saxon does not currently include any locking code to prevent concurrent threads attempting to update the same document.
This is something that applications must organize for themselves.</p>
      <z c="13" p="9"/>
      <p>At the Java API level, updated documents are not automatically written back to disk. Rather, the <code>runUpdate()</code>
method returns a set containing the root nodes of documents that have been updated. This may include documents that were read
using the doc() or collection() functions as well as documents supplied as the context node of the query or by binding
external variables. There is a helper method <code>QueryResult.rewriteToDisk</code> allowing such documents to be written 
back to disk if required, but this must be explicitly invoked by the application. Clearly if the application does not have
write access to the URI, this operation will fail.</p>
      <z c="14" p="10"/>
      <p>Applications should access the updated document via the root nodes returned by the <code>runUpdate()</code> function.
Use of <code>NodeInfo</code> objects that were obtained before running the update is in general unsafe; while it will probably
work in most cases, there are some cases (particularly with attributes) where the <code>NodeInfo</code> object returned to the 
application is a snapshot created on demand, and this snapshot will not be updated when the underlying tree is changed.</p>
      <z c="15" p="11"/>
      <p>Updates are not currently atomic, as required by the specification. In particular, if the update fails revalidation
against the schema, it is not rolled back.</p>
      <z c="16" p="12"/>
      <exit at="12" of="76"/>
   </loop>
   <loop n="6">
      <z c="6" p="2"/>Version 9.1 (2008-NN-NN)<z c="7" p="3"/>
      <p>XQuery Updates</p>
      <z c="8" p="4"/>
      <p>Conditional Type Assignment</p>
      <z c="9" p="5"/>
      <p>Saxon 9.1 introduces support for XQuery Updates.</p>
      <z c="10" p="6"/>
      <p>To run an updating query from the command line, use the option <code>-update:on</code> on the command line.
From Java, compile the query in the normal way, and use the method <code>XQueryExpression.runUpdate()</code> to
execute the query. At present it is not possible to run updates using the higher-level interfaces in XQJ or S9API,
or using the .NET API.</p>
      <z c="11" p="7"/>
      <p>To enable updating internally, an extension of the <code>NodeInfo</code> interface has been introduced, called
<code>MutableNodeInfo</code>. Currently the only tree implementation that supports this interface is the linked tree
(formerly called the standard tree). In principle updating should work with any tree model that supports this
interface, though at present there are probably some dependencies on the specific implementation.</p>
      <z c="12" p="8"/>
      <p>The linked tree has been improved so that it can now handle schema type annotations, and there have been improvements
to the way in which line number information is maintained.</p>
      <z c="13" p="9"/>
      <p>Saxon does not currently include any locking code to prevent concurrent threads attempting to update the same document.
This is something that applications must organize for themselves.</p>
      <z c="14" p="10"/>
      <p>At the Java API level, updated documents are not automatically written back to disk. Rather, the <code>runUpdate()</code>
method returns a set containing the root nodes of documents that have been updated. This may include documents that were read
using the doc() or collection() functions as well as documents supplied as the context node of the query or by binding
external variables. There is a helper method <code>QueryResult.rewriteToDisk</code> allowing such documents to be written 
back to disk if required, but this must be explicitly invoked by the application. Clearly if the application does not have
write access to the URI, this operation will fail.</p>
      <z c="15" p="11"/>
      <p>Applications should access the updated document via the root nodes returned by the <code>runUpdate()</code> function.
Use of <code>NodeInfo</code> objects that were obtained before running the update is in general unsafe; while it will probably
work in most cases, there are some cases (particularly with attributes) where the <code>NodeInfo</code> object returned to the 
application is a snapshot created on demand, and this snapshot will not be updated when the underlying tree is changed.</p>
      <z c="16" p="12"/>
      <p>Updates are not currently atomic, as required by the specification. In particular, if the update fails revalidation
against the schema, it is not rolled back.</p>
      <z c="17" p="13"/>
      <exit at="12" of="76"/>
   </loop>
   <loop n="7">
      <z c="7" p="3"/>Version 9.1 (2008-NN-NN)<z c="8" p="4"/>
      <p>XQuery Updates</p>
      <z c="9" p="5"/>
      <p>Conditional Type Assignment</p>
      <z c="10" p="6"/>
      <p>Saxon 9.1 introduces support for XQuery Updates.</p>
      <z c="11" p="7"/>
      <p>To run an updating query from the command line, use the option <code>-update:on</code> on the command line.
From Java, compile the query in the normal way, and use the method <code>XQueryExpression.runUpdate()</code> to
execute the query. At present it is not possible to run updates using the higher-level interfaces in XQJ or S9API,
or using the .NET API.</p>
      <z c="12" p="8"/>
      <p>To enable updating internally, an extension of the <code>NodeInfo</code> interface has been introduced, called
<code>MutableNodeInfo</code>. Currently the only tree implementation that supports this interface is the linked tree
(formerly called the standard tree). In principle updating should work with any tree model that supports this
interface, though at present there are probably some dependencies on the specific implementation.</p>
      <z c="13" p="9"/>
      <p>The linked tree has been improved so that it can now handle schema type annotations, and there have been improvements
to the way in which line number information is maintained.</p>
      <z c="14" p="10"/>
      <p>Saxon does not currently include any locking code to prevent concurrent threads attempting to update the same document.
This is something that applications must organize for themselves.</p>
      <z c="15" p="11"/>
      <p>At the Java API level, updated documents are not automatically written back to disk. Rather, the <code>runUpdate()</code>
method returns a set containing the root nodes of documents that have been updated. This may include documents that were read
using the doc() or collection() functions as well as documents supplied as the context node of the query or by binding
external variables. There is a helper method <code>QueryResult.rewriteToDisk</code> allowing such documents to be written 
back to disk if required, but this must be explicitly invoked by the application. Clearly if the application does not have
write access to the URI, this operation will fail.</p>
      <z c="16" p="12"/>
      <p>Applications should access the updated document via the root nodes returned by the <code>runUpdate()</code> function.
Use of <code>NodeInfo</code> objects that were obtained before running the update is in general unsafe; while it will probably
work in most cases, there are some cases (particularly with attributes) where the <code>NodeInfo</code> object returned to the 
application is a snapshot created on demand, and this snapshot will not be updated when the underlying tree is changed.</p>
      <z c="17" p="13"/>
      <p>Updates are not currently atomic, as required by the specification. In particular, if the update fails revalidation
against the schema, it is not rolled back.</p>
      <z c="18" p="14"/>
      <exit at="12" of="76"/>
   </loop>
</out>